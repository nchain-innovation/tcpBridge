#[test_only]
module blockchain_oracle::merkle_proofs_tests;

use blockchain_oracle::spv::{new, verify_merkle_proof};
use sui::hex::decode;

#[test]
fun test_verify_merkle_proof() {
    let merkle_root = decode(b"a599c41abf258179a0b428ef892c4b05d84e80eb3ca74f17af9a432588badee6");
    let positions = vector[false, false, false, false, false];
    let hashes = vector[
        decode(b"81af08196bc88b9b6de46a9805a5cf07b7b1091f9256aa22fb363f411d8a2fd0"),
        decode(b"597a0d5648c68c5e77adf83b236d5ea68bf910bc955c4f7ff41dbd520f95abcc"),
        decode(b"c514c63bdbe3a3d21944235c592d289537472029484e7eae17f3f472e74a3c5b"),
        decode(b"bb76fa524fe48870886787a0f101be760892b984726db7312e47b90fc943b0cd"),
        decode(b"2c23874dbfdb0cfae50b555ff74c8dfa49bfedddd8309f2d6679657630880798"),
    ];
    let tx = decode(
        b"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1a03b3a20d2f7461616c2e636f6d2fa225c6656a522d78ee520000ffffffff017b64a012000000001976a914522cf9e7626d9bd8729e5a1398ece40dad1b6a2f88ac00000000",
    );

    assert!(verify_merkle_proof(tx, new(positions, hashes), merkle_root));
}

#[test]
fun test_verify_merkle_proof_non_zero_index() {
    let merkle_root = decode(b"a599c41abf258179a0b428ef892c4b05d84e80eb3ca74f17af9a432588badee6");
    let positions = vector[false, true, true, false, false];
    let hashes = vector[
        decode(b"d89d531c5ae4346212de3f8e53c3c9facb292c3d391f93fb614060ebdcdad383"),
        decode(b"b4fc1637ff003e9c39c0808388c95129e77e7c8cffa0f9b13a3e67b83f845d48"),
        decode(b"0a1d7958350d0011d51178d472a6d821d4bbb0dcfdf55de52092e48ada524b3b"),
        decode(b"bb76fa524fe48870886787a0f101be760892b984726db7312e47b90fc943b0cd"),
        decode(b"2c23874dbfdb0cfae50b555ff74c8dfa49bfedddd8309f2d6679657630880798"),
    ];
    let tx = decode(
        b"01000000015fe289e633e8b0f78b1635407b318d0ed45e170277ed6ccca5722ba38601c3a0020000006a4730440220464d7c94775f5b533ecc17b2b28e578af84b447e855d6f143a96acae41a96f7f022037595fde12c586f12ba953d6b0c19aeb3125d5db90b0c8401ca374cc92cec3b64121030b720f52f3d616ffbd0ee85ee9802a5c939342e9c05d231e52972a0aafcb6db5ffffffff0468420000000000001976a914c6bea461a76ce16298e23ef0a2b11a83336fea9988acb80b0000000000001976a914fe6424743b8d375f92f18a117d6f14e658b460ee88ac00000000000000009c006a223150755161374b36324d694b43747373534c4b79316b683536575755374d7455523503534554036170700874726565636861740474797065046c696b6507636f6e74657874027478027478403130653535343161383137636638383463303836343066663866353161643362663730623635373937653661346361306662636264396432393633653638623905656d6f6a6906e2ac86efb88e7aac6610000000001976a914f2b08ecb7283e8d66500785401d3f3a2581d05fe88ac00000000",
    );

    assert!(verify_merkle_proof(tx, new(positions, hashes), merkle_root));
}
